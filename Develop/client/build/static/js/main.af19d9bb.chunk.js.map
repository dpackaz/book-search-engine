{"version":3,"sources":["utils/mutations.js","utils/queries.js","utils/auth.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["CREATE_USER","gql","LOGIN_USER","SAVE_BOOK","DELETE_BOOK","GET_ME","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","i","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","link","infoLink","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","update","cache","me","readQuery","query","writeQuery","data","savedBooks","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","SavedBooks","useQuery","loading","deleteBook","userData","username","handleDeleteBook","updatedBookCache","SignupForm","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","createUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","addUser","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","request","operation","setContext","headers","authorization","InMemoryCache","uri","App","ApolloProvider","exact","path","element","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af19d9bb.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const CREATE_USER = gql`\r\n  mutation createUser($username: String!, $email: String!, $password: String!) {\r\n    createUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    createUser(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($book: SavedBookInput) {\r\n    saveBook(book: $book) {\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        description\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_BOOK = gql`\r\n  mutation deleteBook($bookId: String!) {\r\n    deleteBook(bookId: $bookId) {\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        description\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_ME = gql`\r\n  {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        description\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/client\";\nimport { SAVE_BOOK } from \"../utils/mutations\";\nimport { GET_ME } from \"../utils/queries\";\nimport Auth from \"../utils/auth\";\nimport { searchGoogleBooks } from \"../utils/API\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // execute mutation to save books\n  const [saveBook] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || [\"No author to display\"],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        link: book.volumeInfo.infoLink,\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await saveBook({\n        variables: { book: bookToSave },\n        update: (cache) => {\n          const { me } = cache.readQuery({ query: GET_ME });\n          cache.writeQuery({\n            query: GET_ME,\n            data: { me: { ...me, savedBooks: [...me.savedBooks, bookToSave] } },\n          });\n        },\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : \"Search for a book to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? \"This book has already been saved!\"\n                        : \"Save this Book!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import React from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_ME } from \"../utils/queries\";\nimport { DELETE_BOOK } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { removeBookId } from \"../utils/localStorage\";\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const [deleteBook] = useMutation(DELETE_BOOK);\n  const userData = data?.me || [];\n\n  if (!userData?.username) {\n    return \"Please log in\";\n  }\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await deleteBook({\n        variables: { bookId: bookId },\n        update: (cache) => {\n          const data = cache.readQuery({ query: GET_ME });\n          const userDataCache = data.me;\n          const savedBooksCache = userDataCache.savedBooks;\n          const updatedBookCache = savedBooksCache.filter(\n            (book) => book.bookId !== bookId\n          );\n          data.me.savedBooks = updatedBookCache;\n          cache.writeQuery({\n            query: GET_ME,\n            data: { data: { ...data.me.savedBooks } },\n          });\n        },\n      });\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\n              }:`\n            : \"You have no saved books!\"}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport Auth from \"../utils/auth\";\nimport { useMutation } from \"@apollo/client\";\nimport { CREATE_USER } from \"../utils/mutations\";\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  // define add user mutation\n  const [createUser] = useMutation(CREATE_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await createUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","import React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport { LOGIN_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { useMutation } from \"@apollo/client\";\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [loginUser] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await loginUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\nimport Navbar from \"./components/Navbar\";\nimport { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem(\"id_token\");\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    });\n  },\n  cache: new InMemoryCache(),\n  uri: \"/graphql\",\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Switch>\n          <Navbar />\n          <Route exact path=\"/\" element={<SearchBooks />} />\n          <Route exact path=\"/saved\" element={<SavedBooks />} />\n          <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\n        </Switch>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}